# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/cad/Desktop/eric6IDEWorkingDir/Tutorials/ui/tutorialsWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from .artificialNeuronTabs import ArtificialNeuronTabs
from .activationFunctionsTabs import ActivationFunctionsTabs
from .perceptronTabs import PerceptronTabs
from .adalineTabs import AdalineTabs
from .feedforwardAndBackpropagationTabs import FeedforwardAndBackpropagationTabs
from .lossFunctionsTabs import LossFunctionsTabs
from .underfittingAndOverfittingTabs import UnderfittingAndOverfittingTabs
from .regularizationTabs import RegularizationTabs
from .mlpTabs import MLPTabs
from .convolutionalLayerTabs import ConvolutionalLayerTabs
from .poolingLayerTabs import PoolingLayerTabs
from .flatteningLayerTabs import FlatteningLayerTabs

class Ui_tutorialsWindow(QWidget):
    def __init__(self, parent):
        super(Ui_tutorialsWindow, self).__init__(parent)
        self.setGeometry(300,50,10,10)
        self.setWindowTitle('Tutorials')

        self.leftlist = QListWidget()
        self.leftlist.insertItem(0,'Artificial Neuron')
        self.leftlist.insertItem(1,'Perceptron')
        self.leftlist.insertItem(2,'Adaline')
        self.leftlist.insertItem(3,'Activation Functions')
        self.leftlist.insertItem(4,'Feedforward And Backpropagation')
        self.leftlist.insertItem(5,'Loss Functions')
        self.leftlist.insertItem(6,'Underfitting And Overfitting')
        self.leftlist.insertItem(7,'Regularization')
        self.leftlist.insertItem(8,'Multi-layer Perceptron')
        self.leftlist.insertItem(9,'Convolutional Layer')
        self.leftlist.insertItem(10,'Pooling Layer')
        self.leftlist.insertItem(11,'Flattening Layer')

        self.stack1 = QWidget()
        self.stack2 = QWidget()
        self.stack3 = QWidget()
        self.stack4 = QWidget()
        self.stack5 = QWidget()
        self.stack6 = QWidget()
        self.stack7 = QWidget()
        self.stack8 = QWidget()
        self.stack9 = QWidget()
        self.stack10 = QWidget()
        self.stack11 = QWidget()
        self.stack12 = QWidget()

        self.stack1UI()
        self.stack2UI()
        self.stack3UI()
        self.stack4UI()
        self.stack5UI()
        self.stack6UI()
        self.stack7UI()
        self.stack8UI()     
        self.stack9UI()
        self.stack10UI()
        self.stack11UI()
        self.stack12UI()

        self.stack = QStackedWidget(self)

        self.stack.addWidget(self.stack1)
        self.stack.addWidget(self.stack2)
        self.stack.addWidget(self.stack3)
        self.stack.addWidget(self.stack4)
        self.stack.addWidget(self.stack5)
        self.stack.addWidget(self.stack6)
        self.stack.addWidget(self.stack7)
        self.stack.addWidget(self.stack8)   
        self.stack.addWidget(self.stack9)
        self.stack.addWidget(self.stack10)
        self.stack.addWidget(self.stack11)
        self.stack.addWidget(self.stack12)

        HBox = QHBoxLayout()
        HBox.addWidget(self.leftlist)
        HBox.addWidget(self.stack)

        self.setLayout(HBox)

        self.leftlist.currentRowChanged.connect(self.display)
        
    def stack1UI(self):
        layout = QHBoxLayout()
        
        artificialNeuronTabs = ArtificialNeuronTabs()
#        artificialNeuronTabs.show()
        
        layout.addWidget(artificialNeuronTabs)
        self.stack1.setLayout(layout)

    def stack2UI(self):
        layout = QHBoxLayout()
        
        perceptronTabs = PerceptronTabs()
#        perceptronTabs.show()
        
        layout.addWidget(perceptronTabs)

        self.stack2.setLayout(layout)

    def stack3UI(self):
        layout = QVBoxLayout()

        adalineTabs = AdalineTabs()
#        adalineTabs.show()
        
        layout.addWidget(adalineTabs)
        self.stack3.setLayout(layout)
        
    def stack4UI(self):
        layout = QVBoxLayout()
        
        activationFunctionsTabs = ActivationFunctionsTabs()
#        activationFunctionsTabs.show()
        
        layout.addWidget(activationFunctionsTabs)

        self.stack4.setLayout(layout)

    def stack5UI(self):
        layout = QVBoxLayout()
        
        feedforwardAndBackpropagationTabs = FeedforwardAndBackpropagationTabs()
#        feedforwardAndBackpropagationTabs.show()
        
        layout.addWidget(feedforwardAndBackpropagationTabs)

        self.stack5.setLayout(layout)

    def stack6UI(self):
        layout = QVBoxLayout()
        
        lossFunctionsTabs = LossFunctionsTabs()
#        lossFunctionsTabs.show()
        
        layout.addWidget(lossFunctionsTabs)

        self.stack6.setLayout(layout)
        
    def stack7UI(self):
        layout = QVBoxLayout()
                
        underfittingAndOverfittingTabs = UnderfittingAndOverfittingTabs()
#        underfittingAndOverfittingTabs.show()
        
        layout.addWidget(underfittingAndOverfittingTabs)
        
        self.stack7.setLayout(layout)
        
    def stack8UI(self):
        layout = QVBoxLayout()
        
        regularizationTabs = RegularizationTabs()
#        regularizationTabs.show()
        
        layout.addWidget(regularizationTabs)

        self.stack8.setLayout(layout)
    
    def stack9UI(self):
        layout = QVBoxLayout()
           
        mlpTabs = MLPTabs()
#        mlpTabs.show()
        
        layout.addWidget(mlpTabs)
        
        self.stack9.setLayout(layout)    
    
    def stack10UI(self):
        layout = QVBoxLayout()
        
        convolutionalLayerTabs = ConvolutionalLayerTabs()
#        convolutionalLayerTabs.show()
        
        layout.addWidget(convolutionalLayerTabs)
        
        self.stack10.setLayout(layout)
        
    def stack11UI(self):
        layout = QVBoxLayout()
        
        poolingLayerTabs = PoolingLayerTabs()
#        poolingLayerTabs.show()
        
        layout.addWidget(poolingLayerTabs)
        
        self.stack11.setLayout(layout)    
    
    def stack12UI(self):
        layout = QVBoxLayout()
        
        flatteningLayerTabs = FlatteningLayerTabs()
#        flatteningLayerTabs.show()
        
        layout.addWidget(flatteningLayerTabs)
        
        self.stack12.setLayout(layout)
        
    def display(self,i):
        self.stack.setCurrentIndex(i)
        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    Ui_tutorialsWindow = Ui_tutorialsWindow()
    Ui_tutorialsWindow.show()
    sys.exit(app.exec_())
